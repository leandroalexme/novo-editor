
const fs = require('fs');
const path = require('path');

// Fun√ß√£o para extrair arquivos espec√≠ficos do Polotno
function extractCompletePolotno() {
  const polotnoPath = './node_modules/polotno';
  const outputPath = './polotno-complete-extraction';
  
  if (!fs.existsSync(polotnoPath)) {
    console.log('‚ùå Pasta polotno n√£o encontrada em node_modules');
    return;
  }
  
  console.log('üöÄ INICIANDO EXTRA√á√ÉO COMPLETA DO POLOTNO SDK\n');
  
  // Criar pasta de destino
  if (!fs.existsSync(outputPath)) {
    fs.mkdirSync(outputPath, { recursive: true });
  }
  
  // Estruturas principais para extrair
  const coreStructures = {
    // J√° extra√≠dos anteriormente
    'model': 'Modelos de dados (Store, Elements, Pages)',
    'canvas': 'Canvas e Workspace principal',
    'toolbar': 'Ferramentas e controles',
    'side-panel': 'Pain√©is laterais',
    'utils': 'Utilit√°rios essenciais',
    
    // NOVOS - Funcionalidades importantes que faltaram
    'react-canvas': 'Componentes React para Canvas',
    'react-toolbar': 'Componentes React da Toolbar',
    'pages-timeline': 'Timeline de p√°ginas',
    'config': 'Configura√ß√µes globais',
    'polotno-toolbar': 'Toolbar espec√≠fica do Polotno',
    'workspace': 'Workspace components',
    'elements': 'Elementos espec√≠ficos',
    'filters': 'Sistema de filtros',
    'animations': 'Sistema de anima√ß√µes',
    'export': 'Sistema de exporta√ß√£o',
    'import': 'Sistema de importa√ß√£o',
    'fonts': 'Sistema de fontes',
    'icons': 'Sistema de √≠cones',
    'templates': 'Sistema de templates',
    'localization': 'Sistema de tradu√ß√£o'
  };
  
  // Extrair estruturas principais
  Object.entries(coreStructures).forEach(([folder, description]) => {
    const sourcePath = path.join(polotnoPath, folder);
    const destPath = path.join(outputPath, folder);
    
    if (fs.existsSync(sourcePath)) {
      console.log(`üìÅ Extraindo: ${folder} - ${description}`);
      copyRecursive(sourcePath, destPath);
    } else {
      console.log(`‚ö†Ô∏è  N√£o encontrado: ${folder}`);
    }
  });
  
  // Arquivos raiz importantes
  const rootFiles = [
    'index.js',
    'index.d.ts', 
    'package.json',
    'README.md',
    'CHANGELOG.md'
  ];
  
  console.log('\nüìÑ Extraindo arquivos raiz importantes:');
  rootFiles.forEach(file => {
    const sourcePath = path.join(polotnoPath, file);
    const destPath = path.join(outputPath, file);
    
    if (fs.existsSync(sourcePath)) {
      console.log(`   ‚úÖ ${file}`);
      fs.copyFileSync(sourcePath, destPath);
    } else {
      console.log(`   ‚ùå ${file} - n√£o encontrado`);
    }
  });
  
  // Funcionalidades espec√≠ficas que est√£o sendo usadas no editor
  const specificFeatures = {
    'react-konva': 'Integra√ß√£o com Konva.js',
    'mobx-state-tree': 'State management',
    'blueprint': 'Componentes UI',
    'file-handling': 'Manipula√ß√£o de arquivos',
    'image-processing': 'Processamento de imagens',
    'text-editing': 'Edi√ß√£o de texto',
    'shape-tools': 'Ferramentas de formas',
    'selection-tools': 'Ferramentas de sele√ß√£o',
    'transform-tools': 'Ferramentas de transforma√ß√£o',
    'layer-management': 'Gerenciamento de camadas',
    'hotkeys': 'Teclas de atalho',
    'clipboard': 'Sistema de clipboard',
    'undo-redo': 'Sistema de desfazer/refazer',
    'zoom-pan': 'Zoom e pan',
    'snap-guides': 'Guias de alinhamento'
  };
  
  console.log('\nüîç Buscando funcionalidades espec√≠ficas:');
  Object.entries(specificFeatures).forEach(([feature, description]) => {
    searchForFeature(polotnoPath, outputPath, feature, description);
  });
  
  // Criar mapa detalhado do que foi extra√≠do
  createExtractionMap(outputPath);
  
  console.log('\n‚úÖ EXTRA√á√ÉO COMPLETA FINALIZADA!');
  console.log(`üìÇ Arquivos extra√≠dos em: ${outputPath}`);
  console.log(`üìã Veja o mapa detalhado em: ${outputPath}/EXTRACTION_MAP.md`);
}

function copyRecursive(src, dest) {
  if (fs.existsSync(src)) {
    fs.mkdirSync(dest, { recursive: true });
    
    fs.readdirSync(src).forEach(file => {
      const srcPath = path.join(src, file);
      const destPath = path.join(dest, file);
      
      if (fs.statSync(srcPath).isDirectory()) {
        copyRecursive(srcPath, destPath);
      } else {
        fs.copyFileSync(srcPath, destPath);
      }
    });
  }
}

function searchForFeature(polotnoPath, outputPath, featureName, description) {
  const featureFiles = [];
  
  // Buscar arquivos relacionados √† funcionalidade
  function searchInDirectory(dir, searchTerm) {
    if (!fs.existsSync(dir)) return;
    
    try {
      fs.readdirSync(dir).forEach(item => {
        const itemPath = path.join(dir, item);
        const stats = fs.statSync(itemPath);
        
        if (stats.isDirectory()) {
          searchInDirectory(itemPath, searchTerm);
        } else if (item.toLowerCase().includes(searchTerm.toLowerCase()) || 
                   item.includes(searchTerm.replace('-', '_'))) {
          featureFiles.push(itemPath);
        }
      });
    } catch (error) {
      // Ignorar erros de permiss√£o
    }
  }
  
  searchInDirectory(polotnoPath, featureName);
  
  if (featureFiles.length > 0) {
    console.log(`   ‚úÖ ${featureName} - ${description} (${featureFiles.length} arquivos)`);
    
    // Criar pasta para a funcionalidade
    const featureDir = path.join(outputPath, 'features', featureName);
    fs.mkdirSync(featureDir, { recursive: true });
    
    // Copiar arquivos encontrados
    featureFiles.forEach(file => {
      const fileName = path.basename(file);
      const destPath = path.join(featureDir, fileName);
      fs.copyFileSync(file, destPath);
    });
  } else {
    console.log(`   ‚ùå ${featureName} - n√£o encontrado`);
  }
}

function createExtractionMap(outputPath) {
  const mapContent = `# MAPA COMPLETO DA EXTRA√á√ÉO DO POLOTNO

## üìä RESUMO DA EXTRA√á√ÉO

### ‚úÖ FUNCIONALIDADES PRINCIPAIS EXTRA√çDAS:

#### üèóÔ∏è **ARQUITETURA CORE**
- **model/** - Sistema de estado MobX
- **canvas/** - Canvas principal e workspace
- **toolbar/** - Ferramentas e controles
- **side-panel/** - Pain√©is laterais
- **utils/** - Utilit√°rios essenciais

#### üé® **COMPONENTES UI**
- **react-canvas/** - Componentes React do canvas
- **react-toolbar/** - Componentes React da toolbar
- **pages-timeline/** - Timeline de p√°ginas
- **workspace/** - Componentes do workspace

#### üîß **FUNCIONALIDADES ESPEC√çFICAS**
- **Pan/Zoom** - Navega√ß√£o do canvas
- **Sele√ß√£o** - Sele√ß√£o de elementos
- **Transforma√ß√£o** - Resize, rotate, move
- **Snap/Guias** - Alinhamento autom√°tico
- **Hotkeys** - Atalhos de teclado
- **Clipboard** - Copy/paste
- **Undo/Redo** - Hist√≥rico de a√ß√µes
- **Layers** - Gerenciamento de camadas
- **Export** - Sistema de exporta√ß√£o
- **Import** - Sistema de importa√ß√£o

#### üìÇ **SISTEMAS DE ARQUIVO**
- **Upload** - Sistema de upload
- **Templates** - Sistema de templates
- **Saved Locally** - Salvamento local
- **Image Processing** - Processamento de imagens

#### üéØ **ELEMENTOS GR√ÅFICOS**
- **Text** - Elementos de texto
- **Shapes** - Formas geom√©tricas
- **Images** - Elementos de imagem
- **Videos** - Elementos de v√≠deo
- **Icons** - √çcones e s√≠mbolos
- **Lines** - Linhas e conectores

#### üé™ **EFEITOS E ANIMA√á√ïES**
- **Filters** - Filtros de imagem
- **Animations** - Sistema de anima√ß√µes
- **Gradients** - Gradientes
- **Shadows** - Sombras e efeitos

#### üåê **LOCALIZA√á√ÉO E TEMAS**
- **Localization** - Sistema de tradu√ß√£o
- **Themes** - Sistema de temas
- **Fonts** - Gerenciamento de fontes

## üîç ARQUIVOS IMPORTANTES ENCONTRADOS

### Arquivos de Configura√ß√£o:
- \`index.js\` - Entry point principal
- \`package.json\` - Depend√™ncias e scripts
- \`config/\` - Configura√ß√µes globais

### Sistemas Core:
- \`model/store.js\` - Store principal MobX
- \`canvas/workspace-canvas.js\` - Canvas principal
- \`toolbar/toolbar.js\` - Toolbar principal
- \`side-panel/side-panel.js\` - Painel lateral

### Funcionalidades Cr√≠ticas:
- \`canvas/hotkeys.js\` - Sistema de hotkeys
- \`utils/clipboard.js\` - Sistema de clipboard
- \`model/history.js\` - Sistema de undo/redo
- \`canvas/use-transformer-snap.js\` - Sistema de snap

## üìã COMO USAR OS C√ìDIGOS EXTRA√çDOS

### 1. **Estudar a Arquitetura**
- Comece pelo \`model/store.js\`
- Entenda o \`canvas/workspace-canvas.js\`
- Analise o \`toolbar/toolbar.js\`

### 2. **Implementar Funcionalidades**
- Use os arquivos de \`utils/\` como refer√™ncia
- Copie a l√≥gica dos \`canvas/\` components
- Adapte os \`side-panel/\` components

### 3. **Customizar Interface**
- Modifique os componentes React
- Altere estilos CSS
- Adicione novas funcionalidades

## ‚ö†Ô∏è IMPORTANTE

Este √© um projeto de **ESTUDO APENAS**.
- N√£o usar para fins comerciais
- Respeitar a licen√ßa do Polotno
- Dar cr√©ditos quando apropriado

## üéØ PR√ìXIMOS PASSOS

1. Analise o \`model/store.js\` para entender o state
2. Estude o \`canvas/workspace-canvas.js\` para o canvas
3. Implemente suas pr√≥prias customiza√ß√µes
4. Teste cada funcionalidade separadamente

---

**Total de arquivos extra√≠dos:** ${countFiles(outputPath)}
**Data da extra√ß√£o:** ${new Date().toLocaleDateString('pt-BR')}
`;

  fs.writeFileSync(path.join(outputPath, 'EXTRACTION_MAP.md'), mapContent);
}

function countFiles(dir) {
  let count = 0;
  
  function countInDirectory(directory) {
    if (!fs.existsSync(directory)) return;
    
    try {
      fs.readdirSync(directory).forEach(item => {
        const itemPath = path.join(directory, item);
        const stats = fs.statSync(itemPath);
        
        if (stats.isDirectory()) {
          countInDirectory(itemPath);
        } else {
          count++;
        }
      });
    } catch (error) {
      // Ignorar erros
    }
  }
  
  countInDirectory(dir);
  return count;
}

// Executar extra√ß√£o completa
extractCompletePolotno();
